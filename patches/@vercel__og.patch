diff --git a/dist/index.edge.js b/dist/index.edge.js
index a99b5aacc97692238d74cf99d777c116d7b72d5a..a3ee6ee946aa36142f1c5f8da82fa90eb460bb53 100644
--- a/dist/index.edge.js
+++ b/dist/index.edge.js
@@ -18704,7 +18704,7 @@ var loadDynamicAsset = ({ emoji }) => {
     return asset;
   };
 };
-async function render(satori, resvg, opts, defaultFonts, element) {
+async function render(satori, resvg, opts, element) {
   const options = Object.assign({
     width: 1200,
     height: 630,
@@ -18714,7 +18714,7 @@ async function render(satori, resvg, opts, defaultFonts, element) {
     width: options.width,
     height: options.height,
     debug: options.debug,
-    fonts: options.fonts || defaultFonts,
+    fonts: options.fonts,
     loadAdditionalAsset: loadDynamicAsset({
       emoji: options.emoji
     })
@@ -18925,23 +18925,13 @@ function assertValue(v2, errorMessage) {
 // src/index.edge.ts
 var initializedResvg = initWasm(resvg_wasm);
 var initializedYoga = initYoga(yoga_wasm).then((yoga2) => Ll(yoga2));
-var fallbackFont = fetch(new URL("./noto-sans-v27-latin-regular.ttf", import.meta.url)).then((res) => res.arrayBuffer());
 var ImageResponse = class extends Response {
   constructor(element, options = {}) {
     const result = new ReadableStream({
       async start(controller) {
         await initializedYoga;
         await initializedResvg;
-        const fontData = await fallbackFont;
-        const fonts = [
-          {
-            name: "sans serif",
-            data: fontData,
-            weight: 700,
-            style: "normal"
-          }
-        ];
-        const result2 = await render(El, resvg_wasm_exports, options, fonts, element);
+        const result2 = await render(El, resvg_wasm_exports, options, element);
         controller.enqueue(result2);
         controller.close();
       }
